@import "../functions/functions";
$toast-inline-max-width: map_get($grid-breakpoints, 'md') !default;
@mixin ngx-toastr() {
  // Position
  /*.toast-center-center {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  .toast-top-center {
    top: 0;
    right: 0;
    width: 100%;
  }
  .toast-bottom-center {
    bottom: 0;
    right: 0;
    width: 100%;
  }
  .toast-top-full-width {
    top: 0;
    right: 0;
    width: 100%;
  }
  .toast-bottom-full-width {
    bottom: 0;
    right: 0;
    width: 100%;
  }
  .toast-top-left {
    top: 12px;
    left: 12px;
  }
  .toast-top-right {
    top: 12px;
    right: 12px;
  }
  .toast-bottom-right {
    right: 12px;
    bottom: 12px;
  }
  .toast-bottom-left {
    bottom: 12px;
    left: 12px;
  }
  .toast-container.toast-top-center .toast,
  .toast-container.toast-bottom-center .toast {
    width: 300px;
    margin-left: auto;
    margin-right: auto;
  }
  .toast-container.toast-top-full-width .toast,
  .toast-container.toast-bottom-full-width .toast {
    width: 96%;
    margin-left: auto;
    margin-right: auto;
  }*/

  // Toast
  .toast-container {
    &:not(.inline) {
      pointer-events: none;
      position: fixed;
      z-index: 999999;
      right: 1rem;
      bottom: 1rem;
    }
    &.inline .toast {
      max-width: $toast-inline-max-width;
      width: auto;
    }

    .toast {
      opacity: 1;
      &:last-child {
        margin-bottom: 0;
      }

      .toast-title {
        font-weight: bold;
        width: 100%;
        display: inline-block;
      }
      .toast-message {
        display: inline-block;
        word-wrap: break-word;
      }
      .toast-message a:hover {
        text-decoration: underline;
      }
      .toast-close-button {
        padding: 0;
        background-color: transparent;
        border: 0;
        -webkit-appearance: none;
        span {
          display: none;
        }
        /*position: relative;
        right: -0.3em;
        top: -0.3em;
        float: right;
        font-size: 20px;
        font-weight: bold;
        color: inherit;
        text-shadow: 0 1px 0 #fff;
        opacity: 0.5;
        background: transparent;
        border: 0;
        padding: 0;

        position: absolute;
        top: 0;
        right: 0;
        padding: $alert-padding-y $alert-padding-x;
        color: inherit;*/
        //@include close();
      }
      .toast-progress {
        position: absolute;
        left: 0;
        bottom: 0;
        height: 4px;
        background-color: $black;
        opacity: 0.25;
      }
      .toast-close-button:hover,
      .toast-close-button:focus {
        color: $black;
        text-decoration: none;
        cursor: pointer;
        opacity: 0.75;
      }
    }
    .toast:hover {
      //box-shadow: 0 0 10px rgba(0, 0, 0, 0.15);
      opacity: 1;
      cursor: pointer;
    }
  }
  .toast-progress {
    //top:0;
  }

  @each $color, $value in $theme-colors {

    // convert danger to error to match classes used by library
    $toast-color: if($color == 'danger', 'error', $color);

    // override the style of primary and info toast to match alerts
    @if ($color == 'primary') or ($color == 'info') {
      $value: map-get($theme-colors, 'secondary');
    }

    .toast.toast-#{$toast-color} {
      @include alert-variant($value, $value, theme-color-level($color, $alert-color-level));
      @if index("danger" "warning" "success" "info", $color) {
        @include alert-icon($value, $value, theme-color-level($color, $alert-color-level), $color);
      }
      &:hover {
        @include gradient-bg(lighten($value, 7.5%));
      }
      .toast-close-button {
        @include close($value);
      }
    }
  }
  @media (max-width: map-get($grid-breakpoints, 'lg')) {
    .toast-container {
      left: 1rem;
      bottom: 1rem;
    }
  }
  @media (max-width: map-get($grid-breakpoints, 'sm')) {
    .toast-container {
      left: 0;
      width: 100vw;
      bottom: 0;
       .toast {
        width: 100%;
      }
    }
  }
}
